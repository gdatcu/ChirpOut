{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 1,
    "pending": 0,
    "failures": 1,
    "start": "2024-06-04T17:54:07.564Z",
    "end": "2024-06-04T17:56:03.500Z",
    "duration": 115936,
    "testsRegistered": 2,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "191fb37b-b026-464f-89aa-efaa4b589a58",
      "title": "",
      "fullFile": "C:\\xampp\\htdocs\\ChirpOut\\selenium-automation\\tests\\LoginPageTest.js",
      "file": "\\tests\\LoginPageTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "265e2d65-3b27-43e7-976d-127fc6b06002",
          "title": "Login Page Tests",
          "fullFile": "C:\\xampp\\htdocs\\ChirpOut\\selenium-automation\\tests\\LoginPageTest.js",
          "file": "\\tests\\LoginPageTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Login Page Tests\"",
              "fullTitle": "Login Page Tests \"before each\" hook in \"Login Page Tests\"",
              "timedOut": false,
              "duration": 13528,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "18275c5f-c3e0-4863-a1c0-0cd8d92e2385",
              "parentUUID": "265e2d65-3b27-43e7-976d-127fc6b06002",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Login Page Tests\"",
              "fullTitle": "Login Page Tests \"after each\" hook in \"Login Page Tests\"",
              "timedOut": false,
              "duration": 13180,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "b115ce56-5d16-45a9-bc03-53afa9647d29",
              "parentUUID": "265e2d65-3b27-43e7-976d-127fc6b06002",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should login with valid credentials",
              "fullTitle": "Login Page Tests should login with valid credentials",
              "timedOut": true,
              "duration": 30133,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(driver);\n// Navigate to the login page\nawait loginPage.navigateTo();\n// Take a screenshot before any interactions\nawait loginPage.takeScreenshot('LoginPageTest_before_interaction_valid_login.png');\n\n// Assert that the URL and Page title are correct\nlet currentUrl = await driver.getCurrentUrl();\nlet initialTitle = await driver.getTitle();\nassert.strictEqual(currentUrl, BASE_URL, `URL should be '${BASE_URL}'`);\nassert.strictEqual(initialTitle, 'Welcome to ChirpOut', `Page title should be 'Welcome to ChirpOut'`);\n// Perform login action\nawait loginPage.login(VALID_USERNAME, VALID_PASSWORD);\n// Add assertions for successful login\nlet homePageUrl = 'http://localhost:8080/demo/index.php'; // Assuming the home page URL\nlet newUrl = await driver.getCurrentUrl();\nassert.strictEqual(newUrl, homePageUrl, 'URL should be the home page URL after login');\n// Take a screenshot after login validation\nawait loginPage.takeScreenshot('LoginPageTest_after_interaction_valid_login.png');",
              "err": {
                "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\xampp\\htdocs\\ChirpOut\\selenium-automation\\tests\\LoginPageTest.js)",
                "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\xampp\\htdocs\\ChirpOut\\selenium-automation\\tests\\LoginPageTest.js)\n    at listOnTimeout (node:internal/timers:573:17)\n    at process.processTimers (node:internal/timers:514:7)",
                "diff": null
              },
              "uuid": "84d1ed8a-1aa0-4f7d-8297-c9ebbea34e27",
              "parentUUID": "265e2d65-3b27-43e7-976d-127fc6b06002",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not login with invalid credentials",
              "fullTitle": "Login Page Tests should not login with invalid credentials",
              "timedOut": false,
              "duration": 12625,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginPage = new LoginPage(driver);\n// Take a screenshot before any interactions\nawait loginPage.takeScreenshot('LoginPageTest_before_interaction_invalid_login.png');\n// Navigate to the login page\nawait loginPage.navigateTo();\n// Assert that the URL and Page title are correct\nlet currentUrl = await driver.getCurrentUrl();\nlet initialTitle = await driver.getTitle();\nassert.strictEqual(currentUrl, BASE_URL, `URL should be '${BASE_URL}'`);\nassert.strictEqual(initialTitle, 'Welcome to ChirpOut', `Page title should be 'Welcome to ChirpOut'`);\n// Perform invalid login action\nawait loginPage.login('invalid@example.com', 'invalidPassword');\n// Add assertions for failed login\nlet newUrl = await driver.getCurrentUrl();\nassert.strictEqual(newUrl, currentUrl, 'URL should remain the login page URL after failed login');\nlet newTitle = await driver.getTitle();\nassert.strictEqual(newTitle, initialTitle, `Page title should remain 'Welcome to ChirpOut'`);\n// Take a screenshot after invalid login validation\nawait loginPage.takeScreenshot('LoginPageTest_after_interaction_invalid_login.png');",
              "err": {},
              "uuid": "cb44374a-8c6f-48ea-8b32-aa10ee736f17",
              "parentUUID": "265e2d65-3b27-43e7-976d-127fc6b06002",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb44374a-8c6f-48ea-8b32-aa10ee736f17"
          ],
          "failures": [
            "84d1ed8a-1aa0-4f7d-8297-c9ebbea34e27"
          ],
          "pending": [],
          "skipped": [],
          "duration": 42758,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}